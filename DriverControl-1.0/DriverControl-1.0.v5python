{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\ncataMotor = Motor(Ports.PORT20, GearSetting.RATIO_36_1, True)\nintakeMotor = Motor(Ports.PORT11, GearSetting.RATIO_36_1, False)\nIntakePiston = DigitalOut(brain.three_wire_port.a)\nleft_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n\n# BOOLEAN VALUES\ncataStarted = True  # To track whether catapult is running or not\nintakeStarted = True # To track whether intake is running or not\n\n\n# CATAPULT GOING DOWN\ndef controlCatapult1():\n    cataMotor.set_stopping(HOLD)\n    cataMotor.set_position(0, TURNS)\n    cataMotor.set_velocity(100, PERCENT)\n    # cataMotor.spin_for(REVERSE, 180, DEGREES)\n    # cataMotor.spin_for(REVERSE, .5, TURNS)\n    cataMotor.spin_to_position(-210, DEGREES)\n\n\ncontroller_1.buttonL1.pressed(controlCatapult1)\n\n# CATAPULT GOING BACK UP\ndef controlCatapult2():\n    # cataMotor.set_position(0, DEGREES)\n    cataMotor.set_velocity(100, PERCENT)\n    # cataMotor.spin_for(REVERSE, 180, DEGREES)\n    # cataMotor.spin_for(REVERSE, .5, TURNS)\n    cataMotor.spin_to_position(-150, DEGREES)\n\ncontroller_1.buttonL2.pressed(controlCatapult2)\n\n\n\n# INTAKE\nintakeMotor.set_velocity(100, PERCENT)\ndef controlIntake1():\n    intakeMotor.spin(FORWARD)\n    # #global intakeStarted\n    # if intakeStarted == True:\n    #     intakeMotor.spin(FORWARD)\n    #     intakeStarted = False\n    # else:\n    #     intakeMotor.stop()\n    #     intakeStarted = True\n\ndef controlIntake2():\n    intakeMotor.stop() \ncontroller_1.buttonR1.pressed(controlIntake1)\n\ncontroller_1.buttonR2.pressed(controlIntake2)\n\n# def controlIntake2():\n#     global intakeStarted\n#     if intakeStarted == True:\n#         intakeMotor.spin(REVERSE)\n#         intakeStarted = False\n#     else:\n#         intakeMotor.stop()\n#         intakeStarted = True\n# controller_1.buttonR2.pressed(controlIntake2)\n\n\n# # PISTON\n# if (ButtonL1):\n#     IntakePiston.set(false)\n\n# elif (ButtonL2):\n#     IntakePiston.set(true)\n\n# controller_1.buttonL1.pressed(controlCatapult1)\n\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[20],"name":"cataMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[11],"name":"intakeMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1],"name":"IntakePiston","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[9,10,1,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}